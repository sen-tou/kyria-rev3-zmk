/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define SYM 1
#define FUN 2
#define MED 3

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | ESC   | Q | W | E   | R    | T        |                                           |  Y   |  U    |  I    |  O   |   P   | ESC  |
            // | TAB   | A | S | D   | F    | G        |                                           |  H   |  J    |  K    |  L   |   ;   | SHFT |
            // | SHIFT | Z | X | C   | V    | B        | ---      | ---       |==| ---      |          |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                 | --- | WIN  | ALT/ESC  | CTRL/RET | LCTRL/DEL |==| LSHFT/BSPC |  SYM/SPACE   | RALT/TAB | MED/MENU   | --- |
            bindings = <
            &kp ESC   &kp Q &kp W &kp E     &kp R   &kp T                                                       &kp Y       &kp U       &kp I     &kp O   &kp P    &kp ESC
            &kp TAB   &kp A &kp S &kp D     &kp F   &kp G                                                       &kp H       &kp J       &kp K     &kp L   &kp SEMI &kp RSHFT
            &kp LSHFT &kp Z &kp X &kp C     &kp V   &kp B       &none       &none           &none   &none     &kp N       &kp M       &kp COMMA &kp DOT &kp FSLH &kp RCTRL
                                  &none  &kp LGUI &mt LALT ESC &mt LSHFT RET &mt LCTRL DEL          &lt FUN BSPC &lt SYM SPACE   &mt RALT TAB    &lt MED K_APP     &none
            >;
        };
        symbol_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ~    |   !  |  @   |   #  |   $  |   %  |                                         |  +   |  7   |  8   |  9   |  -   |  _   |
            // |  &    |   '  |  {   |  [   |   (  |   <  |                                         |  =   |  4   |  5   |  6   |  0   |  |   |
            // |  ^    |   "  |  }   |  ]   |   )  |   >  |  `   |      |      ==     |      |      |  *   |  1   |  2   |  3   |  /   |  \   |
            //                       |      |      |      |      |      |      ==     |      |      |      |      |      |
            bindings = <
            &kp TILDE   &kp EXCL    &kp AT      &kp HASH    &kp DOLLAR  &kp PERCENT                                         &kp PLUS    &kp N7   &kp N8 &kp N9 &kp MINUS  &kp UNDER
            &kp AMPS     &kp SQT     &kp LBRC    &kp LBKT    &kp LPAR    &kp LT                                             &kp EQUAL   &kp N4   &kp N5 &kp N6 &kp N0     &kp PIPE
            &kp CARET   &kp DQT     &kp RBRC    &kp RBKT    &kp RPAR    &kp GT    &kp GRAVE &trans          &trans &trans   &kp STAR    &kp N1   &kp N2 &kp N3 &kp FSLH   &kp BSLH
                                                                &trans &trans &trans &trans &trans          &trans &trans &trans &trans &trans
            >;
        };
        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | F1    | F2   | F3   | F4   | F5   | F6   |                                         | F7   | F8   | F9   | F10  | F11   | F12   |
            // |       |      |      |      |      |      |                                         | <-   | ⬇    | ⬆    | ->   | HOME  | END   |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      | PG_UP | PG_DN |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |
            bindings = <
            &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6                                    &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
            &trans &trans &trans &trans &trans &trans                                    &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp HOME &kp END
            &trans &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &kp PG_UP &kp PG_DN
                                 &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
                    
            >;
        };
        media_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |         |         | BT_CLR  | BTSEL0  | BTSEL1  | BTSEL2 |                                         | C_BRI_INC | C_VOL_UP | C_MUTE | C_VOL_DN |      |      |
            // |         |         |         | BTSEL3  | BTSEL4  |        |                                         | C_BRI_DEC | C_PREV   | C_PP   | C_NEXT   |      |      |
            // | RGB_EFF | RGB_EFR | RGB_BRI | RGB_TOG | RGB_BRD |        |      |      |      |      |      |      |           |          |        |          |      |      |
            //                     |         |         |         |        |      |      |      |      |      |      |           |          |
            bindings = <
            &trans &trans &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2              &kp C_BRI_INC &kp C_VOL_UP &kp C_MUTE &kp C_VOL_DN &trans &trans
            &trans &trans &trans     &bt BT_SEL 3 &bt BT_SEL 4 &trans                    &kp C_BRI_DEC &kp C_PREV &kp C_PP &kp C_NEXT &trans &trans
            &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_BRI &rgb_ug RGB_TOG &rgb_ug RGB_BRD &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans &trans
                                 &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
                    
            >;
        };
    };
};
